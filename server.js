// Generated by CoffeeScript 1.4.0
(function() {
  var animal_number, app, connected, consoleRequest, createLogFileName, currentLogFile, endTrial, express, fs, host, interval, io, logData, logDir, logFile, net, nscConnect, nscDisconnect, path, port, sendLogFiles, sendTrialTimeUpdate, server, spawn, startTrial, trialTimeTimer, trial_active, trial_date, trial_length, trial_name, trial_start_time, trial_time;

  app = require('express')();

  express = require('express');

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  net = require('net');

  fs = require('fs');

  path = require('path');

  spawn = require('child_process').spawn;

  logFile = 'log/NSC_LOG.txt';

  currentLogFile = logFile;

  trial_name = "";

  trial_length = 0;

  animal_number = "";

  trial_date = "";

  trial_time = "";

  trial_active = false;

  console.log("started");

  trial_start_time = new Date().getTime();

  logDir = './log/';

  host = 'localhost';

  port = 12345;

  connected = false;

  if (process.argv.length <= 2) {
    console.log('No server & port specified. The format is node server [\'ip\'] [\'port\'].  Connecting on localhost:12345');
  } else {
    host = process.argv[2];
    if (process.argv.length >= 4) {
      port = process.argv[3];
    }
  }

  logData = (function(file, data) {
    return fs.appendFile(file, data.toString(), (function(err) {
      if (err) {
        throw err;
      }
    }));
  });

  nscConnect = (function() {
    console.log('Attempting to connect to NSC server ...');
    exports.client = net.connect(port, host, (function() {
      console.log('client connected');
      fs.writeFileSync(logFile, '');
      connected = true;
      return exports.client.on('data', (function(data) {
        if (exports.trial_active) {
          return logData(currentLogFile, data);
        }
      }));
    }));
    exports.client.on('error', (function() {
      console.log('error connecting to Neuro-Sand-Cube server.  Retrying...');
      return connected = false;
    }));
    exports.client.on('close', (function() {
      console.log('Connection closed.');
      connected = false;
      return nscConnect();
    }));
    exports.client.on('timeout', function() {
      return nscDisconnect();
    });
    return exports.client.on('end', function() {
      connected = false;
      return nscDisconnect();
    });
  });

  nscConnect();

  nscDisconnect = (function() {
    console.log('Disconnected from NSC server...');
    return nscConnect();
  });

  server.listen(8000);

  app.use(express.bodyParser());

  app.use(express["static"](__dirname + '/public'));

  app.get('/', (function(req, res) {
    return res.sendfile(__dirname + '/index.html');
  }));

  app.post('/console', (function(req, res) {
    return consoleRequest(req, res);
  }));

  consoleRequest = (function(req, res) {
    res.sendfile(__dirname + '/console.html');
    if ((req.body.trial_name != null)) {
      console.log(req.body);
      exports.trial_name = req.body.trial_name;
      exports.trial_length = parseInt(req.body.trial_length);
      exports.animal_number = req.body.animal_number;
      exports.trial_date = req.body.trial_date;
      exports.trial_time = req.body.trial_time;
      return startTrial(trial_name, animal_number, trial_length, trial_date, trial_time);
    }
  });

  app.post('/trial', (function(req, res) {
    return res.sendfile(__dirname + '/trial.html');
  }));

  app.post('/logs', (function(req, res) {
    return res.sendfile(__dirname + '/logs.html');
  }));

  app.get('/log/:index', (function(req, res) {
    var file, filename, files, filestream, l;
    if (req.params.index < 0) {
      return l = __dirname + '/' + logDir;
    } else {
      files = fs.readdirSync(logDir);
      file = files[req.params.index];
      file = __dirname + '/' + logDir + file;
      filename = path.basename(file);
      console.log(file);
      console.log(filename);
      res.attachment(filename);
      res.setHeader('Content-disposition', 'attachment; filename=' + filename);
      filestream = fs.createReadStream(file);
      filestream.on('data', function(chunk) {
        return res.write(chunk);
      });
      return filestream.on('end', function() {
        return res.end();
      });
    }
  }));

  io.sockets.on('connection', (function(socket) {
    exports.socket = socket;
    exports.client.on('data', (function(data) {
      return socket.emit('nsc', data.toString());
    }));
    setInterval((function() {
      return socket.emit('connection', {
        "connected": connected
      });
    }), 5000);
    socket.on('command', (function(data) {
      console.log(JSON.stringify(data));
      return exports.client.write(JSON.stringify(data));
    }));
    socket.on('stop_trial', (function(data) {
      return endTrial();
    }));
    socket.on('trial', (function(data) {
      console.log(JSON.stringify(data));
      trial_name = data.trial_name;
      trial_length = parseInt(data.trial_length);
      animal_number = data.animal_number;
      trial_date = data.trial_date;
      trial_time = data.trial_time;
      return startTrial(trial_name, animal_number, trial_length, trial_date, trial_time);
    }));
    socket.on('trial_progress_request', sendTrialTimeUpdate);
    return socket.on('logs_request', function() {
      return sendLogFiles();
    });
  }));

  sendLogFiles = (function() {
    var files;
    files = fs.readdirSync(logDir);
    return exports.socket.emit('logs', files);
  });

  createLogFileName = (function() {
    console.log(exports.trial_date);
    trial_time = exports.trial_time.replace(":", "-");
    return currentLogFile = "log/" + exports.trial_date + "_" + trial_time + "_" + exports.trial_name + "_" + exports.animal_number + ".txt";
  });

  exports.tick = 0;

  interval = 1000 * 60;

  exports.trialTimer = null;

  startTrial = (function(trial_name, animal_number, trial_length, trial_date, trial_time) {
    createLogFileName();
    console.log('startTrial');
    exports.trial_start_time = new Date().getTime();
    exports.tick = 0;
    exports.trial_active = true;
    console.log("\nTrial " + trial_name + " started.\n");
    return exports.trialTimer = setTimeout(trialTimeTimer, interval);
  });

  endTrial = (function() {
    if (exports.trialTimer !== null) {
      clearTimeout(exports.trialTimer);
    }
    exports.tick = 0;
    exports.trial_active = false;
    return console.log("Trial ended.");
  });

  trialTimeTimer = (function() {
    var diff, diffStart, nextTime, now;
    exports.tick = exports.tick + 1;
    now = new Date().getTime();
    diffStart = now - exports.trial_start_time;
    nextTime = exports.trial_start_time + (exports.tick + 1) * interval;
    diff = nextTime - now;
    if (exports.tick < exports.trial_length) {
      exports.trialTimer = setTimeout(trialTimeTimer, diff);
    } else {
      exports.trialTimer = null;
      endTrial();
    }
    return sendTrialTimeUpdate();
  });

  sendTrialTimeUpdate = (function() {
    var endTime, obj;
    obj = {};
    obj.trial_active = exports.trial_active;
    endTime = exports.trial_start_time + exports.trial_length * interval;
    obj.trial_time = endTime - new Date().getTime();
    if (obj.trial_time < 0) {
      obj.trial_time = 0;
    }
    return exports.socket.emit('trial_progress', obj);
  });

}).call(this);
